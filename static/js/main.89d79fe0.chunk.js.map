{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","d","data","id","application_info","timestamp","num_requests","num_savedBytes","num_keys_saved","elements_cached","time_interval","machine_info","cpu","usage","idle","memory","total","used","free","buffers","disk_space","available","load","average_1_min","average_5_min","average_15_min","forEach","element","console","log","dateTime","Date","parseInt","toISOString","columns","Header","accessor","Cell","props","react_default","a","createElement","className","value","es","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89d79fe0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ReactTable from \"react-table\";\r\n// import axios from 'axios'\r\n\r\nclass App extends Component {\r\n  displayData(){\r\n\r\n  }\r\n  render (){\r\n    // url = ''\r\n    //  d = axios.get(url)\r\n    //   .then(response => displayData(response))\r\n    const d = {\r\n      \"_id\": {\r\n        \"$oid\": \"5c609b482df4a368873b46f1\"\r\n      },\r\n      \"timestamp\": \"1549835080484\",\r\n      \"nodes\": [\r\n        {\r\n          \"id\": \"123\",\r\n          \"application_info\": {\r\n            \"timestamp\": \"1549832342646\",\r\n            \"num_requests\": \"13241\",\r\n            \"num_savedBytes\": \"65424\",\r\n            \"num_keys_saved\": \"1\",\r\n            \"elements_cached\": \"13238\",\r\n            \"time_interval\": \"5000\"\r\n          },\r\n          \"machine_info\": {\r\n            \"timestamp\": \"1549566653000\",\r\n            \"cpu\": {\r\n              \"usage\": \"3\",\r\n              \"idle\": \"92.1\"\r\n            },\r\n            \"memory\": {\r\n              \"total\": \"12456540\",\r\n              \"used\": \"4268800\",\r\n              \"free\": \"8187740\",\r\n              \"buffers\": \"360536\"\r\n            },\r\n            \"disk_space\": {\r\n              \"used\": \"448920\",\r\n              \"available\": \"9346000\"\r\n            },\r\n            \"load\": {\r\n              \"average_1_min\": \"0.42\",\r\n              \"average_5_min\": \"0.46\",\r\n              \"average_15_min\": \"0.45\"\r\n            }\r\n          }\r\n        },\r\n        {\r\n          \"id\": \"13\",\r\n          \"application_info\": {\r\n            \"timestamp\": \"1549832342646\",\r\n            \"num_requests\": \"312\",\r\n            \"num_savedBytes\": \"65424\",\r\n            \"num_keys_saved\": \"1\",\r\n            \"elements_cached\": \"312\",\r\n            \"time_interval\": \"5013300\"\r\n          },\r\n          \"machine_info\": {\r\n            \"timestamp\": \"12313\",\r\n            \"cpu\": {\r\n              \"usage\": \"3\",\r\n              \"idle\": \"92.5\"\r\n            },\r\n            \"memory\": {\r\n              \"total\": \"52342\",\r\n              \"used\": \"4268800\",\r\n              \"free\": \"8187740\",\r\n              \"buffers\": \"360536\"\r\n            },\r\n            \"disk_space\": {\r\n              \"used\": \"448920\",\r\n              \"available\": \"9346000\"\r\n            },\r\n            \"load\": {\r\n              \"average_1_min\": \"0.42\",\r\n              \"average_5_min\": \"0.46\",\r\n              \"average_15_min\": \"0.45\"\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    }\r\n\r\n    const data = d.nodes\r\n\r\n    data.forEach(function(element){\r\n      console.log(d.timestamp);\r\n      var dateTime = new Date(parseInt(d.timestamp));\r\n      element.timestamp = dateTime.toISOString();\r\n    })\r\n\r\n\r\n    const columns = [{\r\n      Header: 'ID',\r\n      accessor: 'id' // String-based value accessors!\r\n    },{\r\n      Header: 'Time',\r\n      accessor: 'timestamp',\r\n      Cell: props => <span className='string'>{props.value}</span> // Custom cell components!\r\n    }, {\r\n      Header: 'Num Requests',\r\n      accessor: 'application_info.num_requests',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Num Saved Bytes',\r\n      accessor: 'application_info.num_savedbytes',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Num Keys Saved',\r\n      accessor: 'application_info.num_keys_saved',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Elements Cached',\r\n      accessor: 'application_info.elements_cached',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'CPU Usage',\r\n      accessor: 'machine_info.cpu.usage',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'CPU Idle',\r\n      accessor: 'machine_info.cpu.idle',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Total Memory',\r\n      accessor: 'machine_info.memory.total',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Free Memory',\r\n      accessor: 'machine_info.memory.free',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Buffer Memory',\r\n      accessor: 'machine_info.memory.buffers',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Disk Space Used',\r\n      accessor: 'machine_info.disk_space.used',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Disk Space Available',\r\n      accessor: 'machine_info.disk_space.available',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Avg 1 Min Load',\r\n      accessor: 'machine_info.load.average_1_min',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Avg 5 Min Load',\r\n      accessor: 'machine_info.load.average_5_min',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    },{\r\n      Header: 'Avg 15 Min Load',\r\n      accessor: 'machine_info.load.average_15_min',\r\n      Cell: props => <span className='number'>{props.value}</span> // Custom cell components!\r\n    }]\r\n   \r\n    return <ReactTable\r\n      data={data}\r\n      columns={columns}\r\n    />\r\n    }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}